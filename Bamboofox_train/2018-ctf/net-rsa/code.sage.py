
# This file was *autogenerated* from the file code.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_65537 = Integer(65537); _sage_const_256 = Integer(256); _sage_const_0p5 = RealNumber('0.5'); _sage_const_16 = Integer(16); _sage_const_157396899712935842966144562474528825171 = Integer(157396899712935842966144562474528825171); _sage_const_191549949433723386840002778806410465057 = Integer(191549949433723386840002778806410465057)
from Crypto.Util.number import *

load("coppersmith.sage")
N = _sage_const_191549949433723386840002778806410465057 
e = _sage_const_65537 
C = _sage_const_157396899712935842966144562474528825171 
prefix = b"BAMBOOFOX{1234567890000"
prefix_n = bytes_to_long(prefix)
for suffix_len in range(_sage_const_16 ,_sage_const_0 ,-_sage_const_1 ):
    print('now length: %d' % suffix_len)
    m = prefix_n * pow(_sage_const_256 ,suffix_len,N)
    ZmodN = Zmod(N)
    P = PolynomialRing(ZmodN, names=('x',)); (x,) = P._first_ngens(1)
    f = (m + x)**e - C
    dd = f.degree()
    beta = _sage_const_0p5                              # we should have q >= N^beta
    epsilon = beta / _sage_const_7                      # <= beta/7
    mm = ceil(beta**_sage_const_2  / (dd * epsilon))    # optimized
    tt = floor(dd * mm * ((_sage_const_1 /beta) - _sage_const_1 ))   # optimized
    XX = ceil(N**((beta**_sage_const_2 /dd) - epsilon)) # we should have |diff| < X
    print('run!')
    roots = coppersmith_howgrave_univariate(f, N, beta, mm, tt, XX)
    print('finish!')
    for r in roots:
        print(long_to_bytes(r))

